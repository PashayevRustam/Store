1) Принцип единственной ответственности (Single Responsibility Principle - SRP):
Каждый класс должен иметь только одну причину для изменения. Например, у нас может быть класс Product.
Этот класс отвечает только за представление и работу с продуктом.

2) Принцип открытости/закрытости (Open/Closed Principle - OCP):
Код должен быть открыт для расширения, но закрыт для модификации. Например, мы можем создать интерфейс DiscountStrategy.
Затем мы можем создать новые стратегии скидок, не изменяя существующий код.

3) Принцип подстановки Барбары Лисков (Liskov Substitution Principle - LSP):
Объекты базового класса должны быть заменяемыми объектами производного класса,
без изменения правильности выполнения программы. Например, у нас есть класс Order.
Мы можем без проблем использовать подклассы Order, не нарушая функциональность.

4) Принцип разделения интерфейса (Interface Segregation Principle - ISP):
Клиенты не должны зависеть от интерфейсов, которые они не используют. Например, у нас есть интерфейс ShippingService.
Если у клиента нет необходимости в shipOrder, мы можем создать другой интерфейс, например, OrderTracker, и использовать его.
